import moment from "moment";

/* 
 * 於 webpack.config.js 中有設 alias: {app: "app"}
 * 所以可以直接設置 app 底下的路徑
 */
import firebase, {firebaseRef} from "app/firebase/"; // index.js 可省略

export var setSearchText = (searchText) => {
    return {
        type: "SET_SEARCH_TEXT",
        searchText
    };
};

export var toggleShowCompleted = () => {
    return {
        type: "TOGGLE_SHOW_COMPLETED"
    };
};

// export var addTodo = (text) => {
//     return {
//         type: "ADD_TODO",
//         text
//     };
// };

/* deal with firebase */
export var addTodo = (todo) => {
    return {
        type: "ADD_TODO",
        todo
    };
};

export var startAddTodo = (text) => {
    return (dispatch, getState) => {
        var todo = {
            // id: uuid(), // id will be generated by firebase
            text: text,
            completed: false,
            createdAt: moment().unix(),
            completedAt: null // null to remove data from firebase
        };

        var todoRef = firebaseRef.child("todos").push(todo);

        /* todoRef.then(after push data will execute the function here) */
        return todoRef.then(() => {
            /* update the store */
            dispatch(addTodo({
                ...todo,
                id: todoRef.key
            }));
        });
    };
};

export var addTodos = (todos) => {
    return {
        type: "ADD_TODOS",
        todos
    };
};

export var startAddTodos = () => {
    return (dispatch, getState) => {
        var todosRef = firebaseRef.child("todos");

        return todosRef.once("value").then((snapshot) => {
            var todos = snapshot.val() || {};
            var parsedTodos = [];

            Object.keys(todos).forEach((todoId) => {
                parsedTodos.push({
                    id: todoId,
                    ...todos[todoId]
                })
            });

            /* update the redux store and then will render in browser */
            dispatch(addTodos(parsedTodos));
        });
    };
};

// export var toggleTodo = (id) => {
//     return {
//         type: "TOGGLE_TODO",
//         id
//     };
// };

export var updateTodo = (id, updates) => {
    return {
        type: "UPDATE_TODO",
        id,
        updates
    };
};

export var startToggleTodo = (id, completed) => {
    return (dispatch, getState) => {
        var todoRef = firebaseRef.child(`todos/${id}`);
        var updates = {
            completed,
            completedAt: completed ? moment().unix() : null
        };

        /* return promise */
        return todoRef.update(updates).then(() => {
            dispatch(updateTodo(id, updates));
        });
    };
};